package main;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;

/**
 *
 * @author a
 */
public final class GestionDonnees extends javax.swing.JFrame {

    /**
     * Creates new form GestionDonnees
     */
    public GestionDonnees() {
        initComponents();
        listModel = new javax.swing.DefaultListModel<>();
        listeStatistiques.setModel(listModel);
        mapLigne = new HashMap<>();
        listeLignes = new ArrayList<>();
        listeArret = new ArrayList<>();
        listerLigneBus();
        listerArretBus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelLigne = new javax.swing.JLabel();
        comboLigne = new javax.swing.JComboBox<>();
        heureMini = new javax.swing.JTextField();
        heureMaxi = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableauValeurs = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListLigne = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        comboArret = new javax.swing.JComboBox<>();
        labelArret = new javax.swing.JLabel();
        jButtonReset = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        listeStatistiques = new javax.swing.JList<>();
        labelStatistiques = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelLigne.setText("Liste des lignes");

        comboLigne.setMaximumRowCount(20);
        comboLigne.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboLigneItemStateChanged(evt);
            }
        });

        tableauValeurs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Ligne", "Écart moyen", "Écart minimal", "Écart maximal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableauValeurs);
        if (tableauValeurs.getColumnModel().getColumnCount() > 0) {
            tableauValeurs.getColumnModel().getColumn(0).setResizable(false);
            tableauValeurs.getColumnModel().getColumn(1).setResizable(false);
            tableauValeurs.getColumnModel().getColumn(2).setResizable(false);
            tableauValeurs.getColumnModel().getColumn(3).setResizable(false);
        }

        jListLigne.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListLigneValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jListLigne);

        jLabel2.setText("Heure minimale");

        jLabel3.setText("Heure maximale");

        comboArret.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboArretItemStateChanged(evt);
            }
        });

        labelArret.setText("Liste des arrêts");

        jButtonReset.setText("RESET");
        jButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResetActionPerformed(evt);
            }
        });

        listeStatistiques.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane3.setViewportView(listeStatistiques);

        labelStatistiques.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setText("GO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(comboLigne, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboArret, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(356, 356, 356)
                                .addComponent(labelArret))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(178, 178, 178)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(heureMini, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(112, 112, 112)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(heureMaxi, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                                    .addComponent(labelStatistiques, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 144, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(381, 381, 381)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonReset)
                .addGap(79, 79, 79))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(361, 361, 361)
                        .addComponent(labelLigne, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jButton2)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelLigne)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(comboLigne, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(labelArret)
                .addGap(12, 12, 12)
                .addComponent(comboArret, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(heureMini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heureMaxi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addComponent(labelStatistiques)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButtonReset))
                .addGap(40, 40, 40)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 119, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jListLigneValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListLigneValueChanged
        if (!jListLigne.isSelectionEmpty()) {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < jListLigne.getSelectedValuesList().size(); i++) {
                sb.append(jListLigne.getSelectedValuesList().get(i).substring(0, jListLigne.getSelectedValuesList().get(i).indexOf(":")));
                sb.append(",");
            }
            sb.deleteCharAt(sb.length() - 1);
            remplirTableau(sb.toString());
        }
    }//GEN-LAST:event_jListLigneValueChanged

    private void comboLigneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboLigneItemStateChanged
        comboArret.removeAllItems();
        listeArret.clear();
        listerArretBus();
    }//GEN-LAST:event_comboLigneItemStateChanged

    private void jButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResetActionPerformed
        comboLigne.setSelectedIndex(-1);
        comboArret.setSelectedIndex(-1);
        heureMaxi.setText("");
        heureMini.setText("");
        listeStatistiques.removeAll();
        listModel.clear();
        labelStatistiques.setText("");
    }//GEN-LAST:event_jButtonResetActionPerformed

    private void comboArretItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboArretItemStateChanged
        /*if (!firstLaunch && comboArret.getSelectedIndex() != -1 && comboLigne.getSelectedIndex() != -1) {
            afficherStatistiques();
        }*/
    }//GEN-LAST:event_comboArretItemStateChanged

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        afficherStatistiques();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            Runtime.getRuntime().exec("cmd /c java -jar C:\\Users\\a\\Documents\\NetBeansProjects\\ChartAdvancedPie\\dist\\ChartAdvancedPie.jar ");
        } catch (IOException ex) {
            Logger.getLogger(GestionDonnees.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionDonnees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionDonnees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionDonnees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionDonnees.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionDonnees().setVisible(true);
            }
        });
    }

    public void remplirTableau(String id_ligne) {
        int nb_ligne = 1;
        for (int i = 0; i < id_ligne.length(); i++) {
            if (id_ligne.charAt(i) == ',') {
                nb_ligne++;
            }
        }
        viderTableau(nb_ligne);
        String url = "jdbc:mysql://148.60.11.205:3306/labonnesastar?autoReconnect=true&useSSL=false";
        int i = 0;
        try {
            Connection conn = DriverManager.getConnection(url, "root", "projet");
            java.sql.Statement requete;
            requete = conn.createStatement();
            java.sql.ResultSet ensresul;

            ensresul = requete.executeQuery("Select nom_ligne, avg(ecart_depart), max(ecart_depart), min(ecart_depart)\n"
                    + "From passage natural join ligne_bus "
                    + "where id_ligne in (" + id_ligne + ") "
                    + choixHeure()
                    + " and ecart_depart < 1200 or ecart_depart > -1200"
                    + "Group by id_ligne "
                    + "order by id_ligne asc");

            while (ensresul.next()) {
                tableauValeurs.setValueAt(ensresul.getString(1), i, 0);
                tableauValeurs.setValueAt(ensresul.getString(2), i, 1);
                tableauValeurs.setValueAt(ensresul.getString(3), i, 2);
                tableauValeurs.setValueAt(ensresul.getString(4), i, 3);
                i++;
            }
            ensresul.close();
            requete.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionDonnees.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void viderTableau(int nb_ligne) {
        tableauValeurs.setModel(new javax.swing.table.DefaultTableModel(
                new Object[nb_ligne][4],
                new String[]{
                    "Ligne", "Écart moyen", "Écart minimal", "Écart maximal"
                }
        ) {
            Class[] types = new Class[]{
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean[]{
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit[columnIndex];
            }
        });
    }

    public void afficherStatistiques() {
        listeStatistiques.removeAll();
        String url = "jdbc:mysql://148.60.11.205:3306/labonnesastar?autoReconnect=true&useSSL=false";
        listModel.clear();
        try {
            Connection conn = DriverManager.getConnection(url, "root", "projet");
            java.sql.Statement requete;
            requete = conn.createStatement();
            java.sql.ResultSet ensresul;

            if (comboArret.getSelectedIndex() == -1 && comboLigne.getSelectedIndex() != -1) {

                labelStatistiques.setText("Statistiques pour la ligne " + comboLigne.getItemAt(
                        comboLigne.getSelectedIndex()).substring(comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":")));

                ensresul = requete.executeQuery("Select nom_ligne, avg(ecart_depart), max(ecart_depart), min(ecart_depart)\n"
                        + "From passage natural join ligne_bus "
                        + "where id_ligne = " + comboLigne.getItemAt(comboLigne.getSelectedIndex()).substring(0, comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":"))
                        + choixHeure()
                        + " and ( ecart_depart < 1200 and ecart_depart > -1200 ) "
                        + " Group by id_ligne order by id_ligne asc");

            } else if (comboArret.getSelectedIndex() != -1 && comboLigne.getSelectedIndex() != -1) {

                labelStatistiques.setText("Statistiques pour la ligne " + comboLigne.getItemAt(
                        comboLigne.getSelectedIndex()).substring(comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":"))
                        + " et l'arrêt " + comboArret.getItemAt(comboArret.getSelectedIndex()).substring(comboArret.getItemAt(comboArret.getSelectedIndex()).indexOf(":")));

                ensresul = requete.executeQuery("Select nom_ligne, nom_arret, avg(ecart_depart), max(ecart_depart), min(ecart_depart)\n"
                        + "From arret_bus, passage natural join ligne_bus "
                        + "where id_ligne = " + comboLigne.getItemAt(comboLigne.getSelectedIndex()).substring(0, comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":"))
                        + choixHeure()
                        + " and ( ecart_depart < 1200 and ecart_depart > -1200 ) "
                        + " and id_point_arret = " + comboArret.getItemAt(comboArret.getSelectedIndex()).substring(0, comboArret.getItemAt(comboArret.getSelectedIndex()).indexOf(":"))
                        + " and id_point_arret = id_arret "
                        + " Group by id_ligne order by id_ligne asc");

            } else if (comboArret.getSelectedIndex() != -1 && comboLigne.getSelectedIndex() == -1) {

                labelStatistiques.setText("Statistiques prenant en compte toutes les lignes pour l'arrêt "
                        + comboArret.getItemAt(comboArret.getSelectedIndex()).substring(comboArret.getItemAt(comboArret.getSelectedIndex()).indexOf(":")));

                ensresul = requete.executeQuery("Select nom_arret, avg(ecart_depart), max(ecart_depart), min(ecart_depart) "
                        + " From passage, arret_bus "
                        + " where id_point_arret=id_arret and id_point_arret = " + comboArret.getItemAt(comboArret.getSelectedIndex()).substring(0, comboArret.getItemAt(comboArret.getSelectedIndex()).indexOf(":"))
                        + choixHeure()
                        + " and ( ecart_depart < 1200 and ecart_depart > -1200 ) "
                        + "Group by id_point_arret "
                        + "order by id_point_arret asc");

            } else {
                return;
            }

            while (ensresul.next()) {

                if (comboArret.getSelectedIndex() == -1 && comboLigne.getSelectedIndex() != -1) {
                    listModel.addElement("Ligne : " + ensresul.getString(1));
                    listModel.addElement("Écart moyen : " + ensresul.getString(2) + " secondes");
                    listModel.addElement("Pire retard : " + ensresul.getString(3) + " secondes");
                    listModel.addElement("Meilleure avance : " + ensresul.getString(4).substring(ensresul.getString(4).indexOf("-") + 1) + " secondes");

                } else if (comboArret.getSelectedIndex() != -1 && comboLigne.getSelectedIndex() == -1) {
                    listModel.addElement("Arrêt : " + ensresul.getString(1));
                    listModel.addElement("Écart moyen : " + ensresul.getString(2) + " secondes");
                    listModel.addElement("Pire retard : " + ensresul.getString(3) + " secondes");
                    listModel.addElement("Meilleure avance : " + ensresul.getString(4).substring(ensresul.getString(4).indexOf("-") + 1) + " secondes");

                } else if (comboArret.getSelectedIndex() != -1 && comboLigne.getSelectedIndex() != -1) {
                    listModel.addElement("Ligne : " + ensresul.getString(1) + " Arret : " + ensresul.getString(2));
                    listModel.addElement("Écart moyen : " + ensresul.getString(3) + " secondes");
                    listModel.addElement("Pire retard : " + ensresul.getString(4) + " secondes");
                    listModel.addElement("Meilleure avance : " + ensresul.getString(5).substring(ensresul.getString(4).indexOf("-") + 1) + " secondes");
                }
            }
            ensresul.close();
            requete.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionDonnees.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void listerLigneBus() {
        String url = "jdbc:mysql://148.60.11.205:3306/labonnesastar?autoReconnect=true&useSSL=false";
        try {
            Connection conn = DriverManager.getConnection(url, "root", "projet");
            java.sql.Statement requete;
            requete = conn.createStatement();
            java.sql.ResultSet ensresul;
            ensresul = requete.executeQuery("select distinct id_ligne, nom_ligne from ligne_bus natural join passage order by id_ligne asc");
            while (ensresul.next()) {
                comboLigne.addItem(ensresul.getInt(1) + " : " + ensresul.getString(2));
                listeLignes.add(ensresul.getInt(1) + " : " + ensresul.getString(2));
            }
            ensresul.close();
            requete.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionDonnees.class.getName()).log(Level.SEVERE, null, ex);
        }
        //updateJList();
        comboLigne.setSelectedIndex(-1);
    }

    public void listerArretBus() {
        String url = "jdbc:mysql://148.60.11.205:3306/labonnesastar?autoReconnect=true&useSSL=false";
        try {
            Connection conn = DriverManager.getConnection(url, "root", "projet");
            java.sql.Statement requete;
            requete = conn.createStatement();
            java.sql.ResultSet ensresul;
            if (comboLigne.getSelectedIndex() == -1) {
                ensresul = requete.executeQuery("select distinct id_arret, nom_arret from arret_bus, passage where passage.id_point_arret=arret_bus.id_arret  order by id_arret asc");
                labelArret.setText("Liste des arrêts");
            } else {
                ensresul = requete.executeQuery("select distinct id_arret, nom_arret from arret_bus, passage where passage.id_point_arret=arret_bus.id_arret and id_ligne=" + comboLigne.getItemAt(comboLigne.getSelectedIndex()).substring(0, comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":")) + " order by id_arret asc");
                labelArret.setText("Liste des arrêts pour la ligne " + comboLigne.getItemAt(comboLigne.getSelectedIndex()).substring(0, comboLigne.getItemAt(comboLigne.getSelectedIndex()).indexOf(":")));
            }
            while (ensresul.next()) {
                comboArret.addItem(ensresul.getInt(1) + " : " + ensresul.getString(2));
                listeArret.add(ensresul.getInt(1) + ": " + ensresul.getString(2));
            }
            ensresul.close();
            requete.close();
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(GestionDonnees.class.getName()).log(Level.SEVERE, null, ex);
        }
        //updateJList();
        comboArret.setSelectedIndex(-1);
    }

    public void updateJList() {
        jListLigne.setModel(new javax.swing.AbstractListModel<String>() {
            public int getSize() {
                return listeLignes.size();
            }

            public String getElementAt(int i) {
                return listeLignes.get(i);
            }
        });
    }

    public String choixHeure() {
        if ((heureMini.getText().equals("") && heureMaxi.getText().equals(""))
                || (!isInteger(heureMini.getText()) || !isInteger(heureMaxi.getText()))) {
            System.out.println("rien ou problème");
            return "";
        } else if (!heureMini.getText().equals("") && heureMaxi.getText().equals("")) {
            return " and hour(depart)>=" + heureMini.getText() + " ";
        } else if (heureMini.getText().equals("") && !heureMaxi.getText().equals("")) {
            return " and hour(depart)<=" + heureMaxi.getText() + " ";
        } else {
            if (Integer.parseInt(heureMini.getText()) < Integer.parseInt(heureMaxi.getText())) {
                return " and hour(depart)>=" + heureMini.getText() + " and hour(depart)<=" + heureMaxi.getText() + " ";
            } else {
                return " and hour(depart)>=" + heureMaxi.getText() + " and hour(depart)<=" + heureMini.getText() + " ";
            }
        }
    }

    public static boolean isInteger(String s) {
        return isInteger(s, 10);
    }

    public static boolean isInteger(String s, int radix) {
        if (s.isEmpty()) {
            return true;
        }
        for (int i = 0; i < s.length(); i++) {
            if (i == 0 && s.charAt(i) == '-') {
                if (s.length() == 1) {
                    return false;
                } else {
                    continue;
                }
            }
            if (Character.digit(s.charAt(i), radix) < 0) {
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> comboArret;
    private javax.swing.JComboBox<String> comboLigne;
    private javax.swing.JTextField heureMaxi;
    private javax.swing.JTextField heureMini;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonReset;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jListLigne;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelArret;
    private javax.swing.JLabel labelLigne;
    private javax.swing.JLabel labelStatistiques;
    private javax.swing.JList<String> listeStatistiques;
    private javax.swing.JTable tableauValeurs;
    // End of variables declaration//GEN-END:variables
    Map<String, String> mapLigne;
    ArrayList<String> listeLignes;
    ArrayList<String> listeArret;
    private final javax.swing.DefaultListModel<String> listModel;
}
